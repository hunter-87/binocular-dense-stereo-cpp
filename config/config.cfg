// An example configuration file that stores information about a store.


tsukubaParams = {

    // choose if load or generate clouds
    load_clouds = false;
    // if true number of clouds to load
    load_clouds_n = 10;

    save_generated_clouds = false;

    // if load_clouds false generate with these settings:
    generate_start_frame = 1;
    generate_stop_frame = 10;
    generate_step = 1;

    incremental = false;
    // if incremental false just register two clouds
    reg_cloud_1 = 0;
    reg_cloud_2 = 1;

    show_single_cloud = false;
    show_sum_cloud = true;

    sacParams = {
        filter_limit = 1000.0;
        max_sacia_iterations = 2000;
        sac_max_correspondence_dist = 2000.0;
        sac_min_correspondence_dist = 3.0;
    }

    registrationParams = {
        leaf_size = 0.3;
        downsample_levels = 1;
        downsample_decrease = 0.03;
        normals_radius = 4.;
        features_radius = 8.;
        use_sac = false;
    }

    icpParams = {

        // double
        TransformationEpsilon = 1e-8;
        // double
        MaxCorrespondenceDistance = 0.5;
        // int
        RANSACIterations = 2000;
        // int
        MaximumIterations = 1000;
        // double
        EuclideanFitnessEpsilon = 1e-5;
        // double
        RANSACOutlierRejectionThreshold = 0.1;
    }

}


kittiParams = {

    // choose if load or generate clouds
    load_clouds = false;
    // if true number of clouds to load
    load_clouds_n = 10;

    save_generated_clouds = false;

    // if load_clouds false generate with these settings:
    generate_start_frame = 0;
    generate_stop_frame = 30;
    generate_step = 10;

    incremental = true;
    // if incremental false just register two clouds
    reg_cloud_1 = 0;
    reg_cloud_2 = 1;

    show_single_cloud = false;
    show_sum_cloud = false;


    sacParams = {
        filter_limit = 1000.0;
        max_sacia_iterations = 2000;
        sac_max_correspondence_dist = 2000.0;
        sac_min_correspondence_dist = 3.0;
    }

    registrationParams = {
        leaf_size = 0.5;
        downsample_levels = 1;
        downsample_decrease = 0.1;
        normals_radius = 4.;
        features_radius = 8.;
        use_sac = false;
    }

    icpParams = {

        // double
        TransformationEpsilon = 1e-8;
        // double
        MaxCorrespondenceDistance = 0.5;
        // int
        RANSACIterations = 2000;
        // int
        MaximumIterations = 1000;
        // double
        EuclideanFitnessEpsilon = 1e-5;
        // double
        RANSACOutlierRejectionThreshold = 0.1;
    }

}

middleburyParams = {

    // choose if load or generate clouds
    load_clouds = false;
    // if true number of clouds to load
    load_clouds_n = 10;

    save_generated_clouds = false;

    // if load_clouds false generate with these settings:
    generate_start_frame = 1;
    generate_stop_frame = 10;
    generate_step = 1;

    incremental = false;
    // if incremental false just register two clouds
    reg_cloud_1 = 0;
    reg_cloud_2 = 1;

    show_single_cloud = false;
    show_sum_cloud = true;

    sacParams = {
        filter_limit = 1000.0;
        max_sacia_iterations = 2000;
        sac_max_correspondence_dist = 2000.0;
        sac_min_correspondence_dist = 3.0;
    }

    registrationParams = {
        leaf_size = 0.3;
        downsample_levels = 1;
        downsample_decrease = 0.03;
        normals_radius = 4.;
        features_radius = 8.;
        use_sac = false;
    }

    icpParams = {

        // double
        TransformationEpsilon = 1e-8;
        // double
        MaxCorrespondenceDistance = 0.5;
        // int
        RANSACIterations = 2000;
        // int
        MaximumIterations = 1000;
        // double
        EuclideanFitnessEpsilon = 1e-5;
        // double
        RANSACOutlierRejectionThreshold = 0.1;
    }

    associations = (

            [1,2],
            // 2nd group
            [2,3],
            [3,4],
            //[4,5], // mort
            // 3rd group
            [6,7],
            [7,8],
            [8,9],
            [9,10],
            [10,11],
            //[11,12),// sminchia TOTALMENTE rectify

            // 4th group
            [13,14],
            [14,15],
            [15,16],
            [16,17],
            [17,18],
            [18,19],
            [19,20],
            [20,21],
            [21,22],
            [22,23],
            [23,24],
            [24,25],
            [25,26],
            [26,27],
            [27,28],
            [28,29],
            [29,30],
            //[30,31],
            // 5th group allineati sinistra
            [32,33],
            [33,34],
            [34,35],
            [35,36],
            [36,37],
            [37,38],
            //[38,39],
            // 6th group
            //[40,41],
            // 7th group
            [42,43],
            [43,44],

            [45,46], //OK segmentazione forse leva un po' di roba
            [44,45]
            )


}


Smoothing = {

    show = false;
    // double
    sigmaColor = 66.;
    // double
    sigmaSpace = 17.;
    // int
    kernel =  7;

}

StereoBM = {

    // NUOVI

   SADWindowSize = 9;
   numberOfDisparities = 80;
   preFilterSize = 11;
   preFilterCap = 63;
   minDisparity = -30;
   textureThreshold = 4;
   uniquenessRatio = 1;
   speckleWindowSize = 0;
   speckleRange = 0;
   disp12MaxDiff = 8;

}

